# Spotify API (top tracks and now playing)

```elixir
Mix.install([
  {:req, "~> 0.3.10"},
  {:kino, "~> 0.9.4"}
])
```

## Secrets

```elixir
spotify_client_id = System.fetch_env!("LB_SPOTIFY_CLIENT_ID")
spotify_client_secret = System.fetch_env!("LB_SPOTIFY_CLIENT_SECRET")
spotify_redirect_uri = System.fetch_env!("LB_SPOTIFY_REDIRECT_URI")
:ok
```

## Getting Authorization Code

Going to use Authorization Flow to get `code`

```elixir
response =
  Req.get!(
    "https://accounts.spotify.com/authorize",
    params: [
      response_type: "code",
      client_id: spotify_client_id,
      redirect_uri: spotify_redirect_uri,
      scope: URI.encode("user-top-read user-read-currently-playing")
    ],
    follow_redirects: false
  )

if response.status != 303,
  do: raise("Got response status: #{response.status}")

response_headers = response.headers

{"location", redirect_uri} =
  Enum.find(response_headers, fn {key, _value} -> key == "location" end)

click_html = """
<html>
<body>
  <a style="color: black;" target="_blank" href="#{redirect_uri}">Go to consent page</a>
</body>
"""

Kino.HTML.new(click_html)
```

## Code input

After granting the consent, you will be redirected to `redirect_uri` with `?code=code`. Set the code below.

```elixir
code_input = Kino.Input.text("Code")
code = Kino.Input.read(code_input)
code_input
```

## Getting auth token and refresh token

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
response =
  Req.post!(
    "https://accounts.spotify.com/api/token",
    headers: [
      {"Content-Type", "application/x-www-form-urlencoded"},
      {"Authorization", "Basic #{Base.encode64("#{spotify_client_id}:#{spotify_client_secret}")}"}
    ],
    body:
      URI.encode_query(
        grant_type: "authorization_code",
        code: code,
        redirect_uri: spotify_redirect_uri
      )
  )

if response.status != 200 do
  IO.puts(response.status)
  IO.puts(inspect(response.body))
  raise("Request failed")
end

token_data = response.body

:ok
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
token_data_holder = token_data
```

## Spotify module

```elixir
defmodule Spotify do
  def process_currently_playing(track) do
    track
  end

  def process_top_tracks(tracks) do
    Enum.map(tracks, fn track ->
      %{
        name: track["name"],
        album_image_url: get_image_url(track),
        album_name: track["album"]["name"],
        artists: get_artists_name(track)
      }
    end)
  end

  defp get_image_url(track) do
    images = track["album"]["images"]
    first_image = Enum.at(images, 0)
    first_image["url"]
  end

  defp get_artists_name(track) do
    artists = track["artists"]
    Enum.map(artists, fn artist -> artist["name"] end)
  end
end
```

## Now playing

```elixir
response =
  Req.get!(
    "https://api.spotify.com/v1/me/player/currently-playing",
    headers: [{"Authorization", "Bearer #{token_data_holder["access_token"]}"}]
  )

now_playing =
  case response.status do
    200 ->
      {:now_playing, response.body}

    204 ->
      {:not_playing, "Nothing playing at the moment"}

    _ ->
      IO.puts(response.status)
      {:error, response}
  end

:ok
```

## Processing now playing

```elixir
case now_playing do
  {:now_playing, now_playing_response} -> Spotify.process_currently_playing(now_playing_response)
  {:no_playing, message} -> message
  {:error, error_response} -> error_response
end
```

## Top songs

```elixir
response =
  Req.get!(
    "https://api.spotify.com/v1/me/top/tracks",
    params: [limit: 10, offset: 0],
    headers: [{"Authorization", "Bearer #{token_data_holder["access_token"]}"}]
  )

top_tracks_response =
  case response.status do
    200 ->
      {:ok, response.body}

    _ ->
      IO.puts(response.status)
      {:error, response}
  end

:ok
```

## Processing top songs

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
case top_tracks_response do
  {:ok, tracks} -> Spotify.process_top_tracks(tracks["items"])
  {:error, error_response} -> error_response
end
```

## Refresh access token

```elixir
# TODO
```
